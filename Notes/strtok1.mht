From: "Saved by Windows Internet Explorer 7"
Subject: Advanced C: Using strtok
Date: Wed, 4 Apr 2007 11:02:33 -0700
MIME-Version: 1.0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://faculty.washington.edu/jstraub/advc_jack/examples/strtok/index.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.0.6000.16386

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Advanced C: Using strtok</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3D"MSHTML 6.00.6000.16397" name=3DGENERATOR></HEAD>
<BODY>
<H1>Using strtok</H1><B>[Sample code: <A=20
href=3D"http://faculty.washington.edu/jstraub/advc_jack/examples/strtok/s=
trtok1_c.txt">strtok1.c.=20
</A>]</B><BR><B>[Formatted html: <A=20
href=3D"http://faculty.washington.edu/jstraub/advc_jack/examples/strtok/s=
trtok1_c.html">strtok1.c.=20
</A>]</B>=20
<BLOCKQUOTE>
  <P>strtok is a Standard C Library Function to extract tokens from a =
string. In=20
  this context a <I>token</I> is a sequence of characters separated by=20
  <I>delimiters.</I> A delimiter can be any single character, and strtok =
allows=20
  you to specify any number of delimiters. For example:=20
  <BLOCKQUOTE><CODE>char str[] =3D "111:222:333;444;555 666";<BR>char =
*token =3D=20
    strtok( str, ":;" ); </CODE></BLOCKQUOTE>The above code calls strtok =
using the=20
  colon (:) and semicolon (;) as delimiters. The first token to be =
parsed will=20
  be "111." I can continue to parse the string by calling strtok and =
passing=20
  NULL in place of the string; strtok will return NULL when it runs out =
of=20
  tokens:=20
  <BLOCKQUOTE><PRE>while ( token !=3D NULL )
{
    printf( "token =3D %s\n", token );
    token =3D strtok( NULL, ":;" );
}
            </PRE></BLOCKQUOTE>The above code will successively return =
the=20
  tokens "222", "333", "444" and "555 666". Note that "555 666" is =
returned as a=20
  single token because white space, in this example, is not treated as a =

  delimiter.=20
  <P>Here are some more examples (please refer to <A=20
  =
href=3D"http://faculty.washington.edu/jstraub/advc_jack/examples/strtok/s=
trtok1_c.txt">strtok1.c=20
  </A>). In this first example we will parse a string using comma and =
space as a=20
  delimiter. Note that:=20
  <OL>
    <LI>Since strtok modifies the string it is parsing we have to make =
sure that=20
    we are not trying to parse a constant string. In this case we copy =
the=20
    constant string that we are parsing into a temporary buffer. (This =
is a good=20
    idea in any event; even if the string being parsed is not constant; =
it is=20
    bad form to mangle your data.)=20
    <LI>We only specify the actual string to be parsed on the first call =
to=20
    strtok; subsequent calls will pass NULL in place of the string.=20
    <LI>We have to specify the set of delimiters every time we call =
strtok.=20
    <LI>When it runs out of tokens strok returns NULL. </LI></OL>
  <BLOCKQUOTE><PRE>char *target    =3D "abc, def, ghi, spot, jane and =
sally";
char *token     =3D NULL;
char buffer[BUF_SIZE];

puts( "Begin strtok example 1-1");
strncpy( buffer, target, BUF_SIZE - 1 );
buffer[BUF_SIZE - 1] =3D '\000';

token =3D strtok( buffer, ", " );
while ( token !=3D NULL )
{
    printf( "Token =3D \"%s\"\n", token );
    token =3D strtok( NULL, ", " );
}
puts( "End strtok example 1-1\n--------------------" );
            </PRE></BLOCKQUOTE>The output of the above code is:=20
  <BLOCKQUOTE><PRE>Begin strtok example 1
Token =3D "abc"
Token =3D "def"
Token =3D "ghi"
Token =3D "spot"
Token =3D "jane"
Token =3D "and"
Token =3D "sally"
End strtok example 1-1
            </PRE></BLOCKQUOTE>In the first example, the part of the =
string=20
  "jane and sally" was parsed into three different tokens because we =
told strtok=20
  to consider a space to be a delimiter. If we used just a comma as a =
delimiter,=20
  "jane and sally" would be a single token. Note, however, that the =
other spaces=20
  in the string will then be included in other tokens:=20
  <BLOCKQUOTE><PRE>token =3D strtok( buffer, "," );
while ( token !=3D NULL )
{
    printf( "Token =3D \"%s\"\n", token );
    token =3D strtok( NULL, "," );
}
            </PRE></BLOCKQUOTE>Here is the output generated by the above =
code:=20

  <BLOCKQUOTE><PRE>Token =3D "abc"
Token =3D " def"
Token =3D " ghi"
Token =3D " spot"
Token =3D " jane and sally"
            </PRE></BLOCKQUOTE>
  <HR>
  <FONT size=3D-1>
  <P><B>Copyright =A9 2007 by Jack Straub<BR>jstraub@centurytel.net=20
</B></P></FONT></BLOCKQUOTE></BODY></HTML>
